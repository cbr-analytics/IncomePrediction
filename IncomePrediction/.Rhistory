for(j in teams){
all_data[,j] = 0 # Assign inital values 0 to each new column created in the loop
print(j)
}
head(all_data,5) # Check the new columns created.
print(all_data$team)
#iterate through and record the teams for each player
for(i in 1:length(all_data$Team)){
teams_of_person = strsplit(as.character(all_data$Team[i]), "/")[[1]]
print(teams_of_person)
for(x in teams_of_person){
all_data[,x][i] = 1	     # Assign value 1 for each column_team with which player is associated
#print("hello")
}
}
# Split and make columns for each position a player plays for. Some players play for multiple
# positons.
#Make position boolean columns
pos = c()
for( i in levels(all_data$Position)){
x = strsplit(i, "/")
for(y in x){
pos = c(pos, y)
}
}
pos = unique(pos)
print(pos)
# add columns with the pos names as the header and 0 as values
for(position in pos){
all_data[,position] = 0
}
#iterate through and record the position(s) for each player
for(i in 1:length(all_data$Position)){
pos_of_person = strsplit(as.character(all_data$Position[i]), "/")[[1]]
for(x in pos_of_person){
all_data[,x][i] = 1
}
}
print(head(all_data))
#turn the born column into
# an age column
# 3 integer columns year:month:date
# Objective: standardize year, month and day and create separate columns for each.
bday_parts = str_split_fixed(all_data$Born, "-", 3)
#adjust year column to account for missing digits
birth_year = c()  # A list created for storing players' year of birth
for(year in bday_parts[,1]){   # Read from the first columns of bday_parts
if(as.numeric(year) < 10){      ## It is two digit year, so payers born in 21st centry must be younger
yr = paste("20", year, sep="") # Players born in 21st century
birth_year = c(birth_year, yr)   # Store the new values in birth_year
}else{
yr = paste("19",year, sep="")  # If player are not born in 21st century append 19 before the year.
birth_year = c(birth_year, yr)
}
}
all_data$birth_year = as.numeric(birth_year)       # Create separate column for YEAR & add to all_data
all_data$birth_month = as.numeric(bday_parts[,2])  # Create separate column for MONTH & add to all_data
all_data$birth_day = as.numeric(bday_parts[,3])   # Create separate column for DAY & add to all_data
head(all_data)
# split Cntry and Nat to boolean columns
birth_country = levels(all_data$Cntry)
# add columns with the country of birth options
# note the Estonia for Uncle Leo
for(country in birth_country){
c = paste("born", country, sep="_")
all_data[,c] = 0
}
#iterate through and record the birth country of each player
for(i in 1:length(all_data$Cntry)){
birth_country = all_data$Cntry[i]
c = paste("born", birth_country, sep="_")
all_data[,c][i] = 1
}
nationality = levels(all_data$Nat)
for(country in nationality){
c = paste("nation", country, sep="_")
all_data[,c] = 0
}
#iterate through and record the birth country of each player
for(i in 1:length(all_data$Nat)){
nationality = all_data$Nat[i]
c = paste("nation", nationality, sep="_")
all_data[,c][i] = 1
}
head(all_data)
## Missing values
count(all_missing_list)
all_data$undrafted = is.na(all_data$DftRd)
#fill median values
#loop through the dataframe, filling each column with the median of
#the existing values for the entire dataset
#where are there still missing values?
all_missing_list =  colnames(all_data)[colSums(is.na(all_data)) > 0]
length(all_missing_list) == 0
#if above true all values are imputed!
for( i in 1:length(all_missing_list)){
#get the global median
median_all = median(all_data[,all_missing_list[i]], na.rm =TRUE)
#imput the missing values with the column's median
all_data[,all_missing_list[i]][is.na(all_data[,all_missing_list[i]])] = median_all
}
all_missing_list =  colnames(all_data)[colSums(is.na(all_data)) > 0]
length(all_missing_list) == 0
cor(train.df$City, train.df$Salary)
barplot(sort(table(all_data$Nat ),
decreasing = TRUE),
horiz = TRUE,
las=1,
col = c("red", "blue4", "blue", "red3", "skyblue"),
main = "Number of NHL players from each country",
ylab = "Country", xlab= "count")
table(all_data$birth_year)
summary(all_data$Salary)
hist(all_data$Salary, breaks=52,
col="salmon", xlab='Salary',
ylab = "Number of players", main='NHL Salary Distribution: 2016/2017')
summary(all_data$Salary)
hist(all_data$Salary, breaks=52,col="salmon", xlab='Salary',
ylab = "Number of players", main='NHL Salary Distribution: 2016/2017')
summary(train.df$Salary)
hist(all_data$Salary, breaks=52,col="salmon", xlab='Salary',
ylab = "Number of players", main='NHL Salary Distribution: 2016/2017')
summary(train.df$Salary)
hist(train.df$Salary, breaks=52,col="salmon", xlab='Salary',
ylab = "Number of players", main='NHL Salary Distribution: 2016/2017')
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned)
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G, train.df$Salary), col = 'red')
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary), col = 'red')
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary), col = 'red')
#plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary), col = 'red')
p <- plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary), col = 'red')
p <- plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary))
#plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary))
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary))
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$G ~ train.df$Salary))
abline(lm(train.df$G ~ train.df$Salary), col = 'blues9')
abline(lm(train.df$G ~ train.df$Salary), col = 'blue')
abline(lm(train.df$G ~ train.df$Salary))
abline(lm(train.df$Salary ~ train.df$G))
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$Salary ~ train.df$G))
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$Salary ~ train.df$G))
plot(train.df$G, train.df$Salary, xlab = "No. Goals", pch =20, ylab = 'Money Earned')
abline(lm(train.df$Salary ~ train.df$G), col = 'blue')
plot(all_data$G, all_data$Salary, pch=20, xlab='goals scored', ylab='money earned', main="Who are the outliers?")
abline(lm(all_data$Salary ~ all_data$G), col="red")
plot(train.df$G, train.df$Salary, pch=20, xlab='goals scored', ylab='money earned', main="Who are the outliers?")
abline(lm(train.df$Salary ~ train.df$G), col="red")
text(train.df$G, train.df$Salary, labels=train.df$Last.Name, cex=0.7, pos = 3)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df$G, train.df$birth_year, train.df$Salary,
pch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,
color=color.gradient(train.df$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df$G, train.df$birth_year, train.df$Salary,
pch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,
color=color.gradient(train.df$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df$G, train.df$birth_year, train.df$Salary,ch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,            color.gradient(train.df$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df$G, train.df$birth_year, train.df$Salary,ch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,            #color.gradient(train.df$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(all_data$G, all_data$birth_year, train.df$Height,ch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,            #color.gradient(train.df$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
train.df2 <- all_data[612,]
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary,ch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2, color.gradient(train.df$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary,ch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2, color.gradient(train.df2$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary,ch=19,type="h",
cex.axis=0.5,
las=1,
lty.hplot=2, #color.gradient(train.df2$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
color.gradient <- function(x, colors=c("green", "yellow", "red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary, #color.gradient(train.df2$Salary,c("black","salmon")),
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary,
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year")
#grid=TRUE
View(train.df2)
View(bday_parts)
View(all_data)
train.df2 <- all_data[c(1:612),]
library(scatterplot3d)
#To allow a colour gradient on out graphs
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary,
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year")
#grid=TRUE
score_3d = scatterplot3d(train.df2$TOI,train.df2$SCF,train.df2$Salary,pch=19,
type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,
#color=color.gradient(all_data$Salary,
#colors=c("black","skyblue")),
main="More relationships:\nSalary, time on ice, and scoring chances",
zlab="Salary",xlab="Time on ice(s)",
ylab="scoring chances while player on ice",
grid=TRUE)
library(scatterplot3d)
#To allow a colour gradient on out graphs
#plot
sd3 = scatterplot3d(train.df2$G, train.df2$birth_year, train.df2$Salary,
pch =19,
type = 'h',
main="Interaction of age, goals and salary",
zlab="Salary",
xlab="Goals",
ylab="Birth Year")
#grid=TRUE
score_3d = scatterplot3d(train.df2$TOI,train.df2$SCF,train.df2$Salary,pch=19,
type="h",
cex.axis=0.5,
las=1,
lty.hplot=2,
#color=color.gradient(all_data$Salary,
#colors=c("black","skyblue")),
main="More relationships:\nSalary, time on ice, and scoring chances",
zlab="Salary",xlab="Time on ice(s)",
ylab="scoring chances while player on ice",
grid=TRUE)
#score_3d.coords = score_3d$xyz.convert(all_data$TOI,all_data$SCF,all_data$Salary)
#text(score_3d.coords$x, score_3d.coords$y,labels=all_data$Last.Name,cex=.5, pos=4)
corrplot(train.df2, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(train.df2, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
pairs(~., data = train.df2
main="Simple Scatterplot Matrix")
pairs(~., data = train.df2,  main="Simple Scatterplot Matrix")
colnames(train.df)
pairs(~ Born+ City + Pr.St + Cntry + Nat + Ht + Wt +DftYr +DftRd +Ovrl +Hand+ Last.Name+
First.Name+ Position+Team+GP+G , data = train.df2,  main="Simple Scatterplot Matrix")
pairs(~ Born+ City + Pr.St + Cntry + Ht + Wt +DftYr +DftRd +Ovrl +Hand+
Position+Team+GP+G , data = train.df2,  main="Simple Scatterplot Matrix")
pairs(~ Born+ + Cntry + Ht + Wt +DftRd +Ovrl +Hand+
Position+Team+GP+G , data = train.df2,  main="Simple Scatterplot Matrix")
pairs(~ Born+ + Cntry + Ht + Wt +DftRd +
Position+Team+GP+G , data = train.df2,  main="Simple Scatterplot Matrix")
pairs(~ Salary+ Born+ +  Ht + Wt +DftRd +
Position+Team+GP+G , data = train.df2,  main="Simple Scatterplot Matrix")
train.df2$Salary <- train.d$Salary
train.df2$Salary <- train.d$Salary
train.df2$Salary <- train.df$Salary
train.df2 <- all_data[c(1:612),]
train.df2$Salary <- train.df$Salary
train.df2 <- all_data[c(1:612),]
#train.df2$Salary <- train.df$Salary
train.df2 <- cbind(train.df$Salary, all_data[1:612,])
#train.df2 <- all_data[c(1:612),]
pairs(~ Salary + Born+ +  Ht + Wt +G , data = train.df2,  main="Simple Scatterplot Matrix")
View(train.df2)
View(train.df2)
pairs(~ Born+ +  Ht + Wt +DftRd +
Position+Team+GP+G , data = train.df2,  main="Simple Scatterplot Matrix")
str(train.final)
colnames(train.final)
cor(train.final$Salary, test.final$Age)
train.df2 <- all_data[c(1:612),]
train.final <- all_data[c(1:612),]
train.final$Salary <- train.df$Salary
View(train.final)
cor(train.final$Salary, test.final$Age)
cor(train.final$Salary, test.final$Born)
test.final <- all_data[c(613:874),]
View(test.final)
#turn the born column into
# an age column
# 3 integer columns year:month:date
library(stringr)
# Objective: standardize year, month and day and create separate columns for each.
bday_parts = str_split_fixed(all_data$Born, "-", 3)
#adjust year column to account for missing digits
birth_year = c()  # A list created for storing players' year of birth
for(year in bday_parts[,1]){   # Read from the first columns of bday_parts
if(as.numeric(year) < 10){      ## It is two digit year, so payers born in 21st centry must be younger
yr = paste("20", year, sep="") # Players born in 21st century
birth_year = c(birth_year, yr)   # Store the new values in birth_year
}else{
yr = paste("19",year, sep="")  # If player are not born in 21st century append 19 before the year.
birth_year = c(birth_year, yr)
}
}
all_data$birth_year = as.numeric(birth_year)       # Create separate column for YEAR & add to all_data
all_data$birth_month = as.numeric(bday_parts[,2])  # Create separate column for MONTH & add to all_data
all_data$birth_day = as.numeric(bday_parts[,3])   # Create separate column for DAY & add to all_data
head(all_data)
View(train.final)
cor(train.final$Salary, test.final$birth_year)
cor(train.final$Salary, train.final$birth_year)
lm_model <- lm(Salary ~., data = train.final)
lm_model <- lm(Salary ~., data = train.final)
print(lm_model)
colnames(train.df)
colnames(all_data)
colnames(train.final)
lm_model <- lm(Salary ~Ht+Wt+Ovrl+G+birth_year, data = train.final)
lm_model
lm_model <- lm(Salary ~Ht+Wt+Ovrl+G+birth_year, data = train.final)
lm_model
summary(lm_model)
predicted_salary <- predict(lm_model, test.final)
predicted_salary <- predict(lm_model, test.final)
summarise(predicted_salary)
predicted_salary <- predict(lm_model, test.final)
predicted_salary
predicted_salary <- predict(lm_model, train.final)
#predicted_salary
actual_preds <- data.frame(cbind(actuals = train.final$Salary, predicteds = predicted_salary))
corrleation_accuracy <- cor(actual_preds)
actual_preds <- data.frame(cbind(actuals = train.final$Salary, predicteds = predicted_salary))
corrleation_accuracy <- cor(actual_preds)
corrleation_accuracy
actual_preds <- data.frame(cbind(actuals = train.final$Salary, predicteds = predicted_salary))
corrleation_accuracy <- cor(actual_preds)
corrleation_accuracy
head(actual_preds)
train <- train.final[c(1:400),]
test <- train.final[c(401:612),]
lm_model <- lm(Salary ~Ht+Wt+Ovrl+G+birth_year, data = train.final)
lm_model
summary(lm_model)
lm_model <- lm(Salary ~Ht+Wt+Ovrl+G+birth_year, data = train)
lm_model
summary(lm_model)
predicted_salary <- predict(lm_model, test)
predicted_salary <- predict(lm_model, test)
actual_preds <- data.frame(cbind(actuals = test$Salary, predicteds = predicted_salary))
corrleation_accuracy <- cor(actual_preds)
corrleation_accuracy
head(actual_preds)
first_importance_list = importance(lm_model)
hist(all_data$Ht)
hist(all_data$Wt)
hist(all_data$Ht,
main="Histogram for NHL players' Height",
xlab="Height",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
hist(all_data$Ht,
main="Histogram for NHL players' Height",
xlab="Height",
border="blue",
col="green",
#xlim=c(100,700),
las=1,
breaks=5)
hist(all_data$Ht,
main="Histogram for NHL players' Height",
xlab="Height",
border="blue",
col="green")
hist(all_data$Ht,
main="Histogram for NHL players' Height",
xlab="Height",
#border="blue",
col="green")
hist(all_data$Wt,
main="Histogram for NHL players' Height",
xlab="Weight",
#border="blue",
col="green")
hist(all_data$Wt,
main="Histogram for NHL players' Weight",
xlab="Weight",
#border="blue",
col="green")
hist(all_data$Wt,
main="Histogram for NHL players' Salary",
xlab="Salary",
#border="blue",
col="green")
setwd("~/JB125")
library(knitr)
purl("R_Script_Report_NHL_20180428_Chandra.Rmd")
